/* The following code was generated by JFlex 1.4.3 on 03.08.11 01:18 */

package vvide.parser;

import vvide.signal.Scope;

/*
 * This file is part of the VVIDE project.
 * 
 * Copyright (C) 2011 Pavel Fischer rubbiroid@gmail.com
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03.08.11 01:18 from the specification file <tt>VCDStructLexer.flex</tt>
 */
public class VCDStructLexer extends AbstractStructLexer {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int TIMESCALE = 4;
	public static final int VAR_REF = 14;
	public static final int VAR = 8;
	public static final int VAR_SIZE = 10;
	public static final int SCOPE = 6;
	public static final int VAR_ID = 12;
	public static final int YYINITIAL = 0;
	public static final int VALUE_CHANGE_ID = 18;
	public static final int VALUE_CHANGE = 16;
	public static final int COMMENT = 20;
	public static final int IGNORED = 2;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
			5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
			"\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\2\37\1\40"
				+ "\1\10\11\37\1\44\1\37\1\35\1\35\10\6\1\46\6\37\1\4"
				+ "\1\41\17\4\1\43\5\4\1\42\1\4\1\42\1\45\1\7\1\47"
				+ "\1\37\1\5\1\37\1\22\1\30\1\26\1\15\1\20\1\24\1\31"
				+ "\1\4\1\27\1\4\1\23\1\17\1\13\1\25\1\14\1\11\1\4"
				+ "\1\32\1\12\1\21\1\16\1\33\1\36\1\42\1\34\1\42\4\37"
				+ "\uff81\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap( ZZ_CMAP_PACKED );

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
			"\13\0\2\1\1\2\1\1\1\0\1\3\2\1\1\4"
				+ "\1\5\1\1\4\5\7\1\1\6\1\7\1\10\4\1"
				+ "\2\0\1\11\2\12\1\13\2\14\10\15\1\16\2\0"
				+ "\5\5\13\0\1\17\2\0\2\11\1\0\7\15\2\0"
				+ "\4\5\4\0\1\20\2\0\1\20\2\0\1\21\1\22"
				+ "\1\0\3\15\1\1\2\15\1\23\1\5\1\24\2\5"
				+ "\5\0\1\25\1\26\6\15\2\5\4\0\1\27\5\15"
				+ "\1\5\2\0\11\15\1\30\1\1\2\0\2\15\1\0"
				+ "\1\15\1\31\1\0\1\15\1\0\1\15\1\32\3\15" + "\5\0\1\33";

	private static int[] zzUnpackAction() {
		int[] result = new int[178];
		int offset = 0;
		offset = zzUnpackAction( ZZ_ACTION_PACKED_0, offset, result );
		return result;
	}

	private static int zzUnpackAction( String packed, int offset, int[] result ) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while ( i < l ) {
			int count = packed.charAt( i++ );
			int value = packed.charAt( i++ );
			do
				result[j++] = value;
			while ( --count > 0 );
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"
				+ "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u01b8\0\u0208\0\u0230"
				+ "\0\u0258\0\u0280\0\u02a8\0\u01b8\0\u02d0\0\u02f8\0\u0320\0\u0348"
				+ "\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488"
				+ "\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8"
				+ "\0\u05f0\0\u0618\0\u01b8\0\u0640\0\u01b8\0\u0668\0\u01b8\0\u0690"
				+ "\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0"
				+ "\0\u0208\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8"
				+ "\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28"
				+ "\0\u0a50\0\u0a78\0\u0550\0\u01b8\0\u0aa0\0\u0ac8\0\u05f0\0\u0618"
				+ "\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08"
				+ "\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48"
				+ "\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u01b8\0\u0e38\0\u0e60"
				+ "\0\u01b8\0\u01b8\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50"
				+ "\0\u0f78\0\u06b8\0\u0fa0\0\u02d0\0\u0fc8\0\u0ff0\0\u1018\0\u1040"
				+ "\0\u1068\0\u1090\0\u10b8\0\u01b8\0\u01b8\0\u10e0\0\u1108\0\u1130"
				+ "\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270"
				+ "\0\u1298\0\u06b8\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388"
				+ "\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8"
				+ "\0\u14f0\0\u1518\0\u1540\0\u06b8\0\u06b8\0\u1568\0\u1590\0\u15b8"
				+ "\0\u15e0\0\u1608\0\u1630\0\u06b8\0\u1658\0\u1680\0\u16a8\0\u16d0"
				+ "\0\u01b8\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8"
				+ "\0\u1810\0\u01b8";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[178];
		int offset = 0;
		offset = zzUnpackRowMap( ZZ_ROWMAP_PACKED_0, offset, result );
		return result;
	}

	private static int zzUnpackRowMap( String packed, int offset, int[] result ) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while ( i < l ) {
			int high = packed.charAt( i++ ) << 16;
			result[j++] = high | packed.charAt( i++ );
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
			"\10\14\1\15\17\14\1\16\1\14\1\16\2\14\1\16"
				+ "\2\14\1\17\3\16\4\14\10\2\1\20\37\2\6\14"
				+ "\1\21\1\14\1\22\1\23\1\24\1\23\2\14\1\23"
				+ "\5\14\2\23\7\14\1\21\16\14\2\25\1\14\1\26"
				+ "\1\22\2\25\1\27\5\25\1\30\2\25\1\31\3\25"
				+ "\1\32\4\25\1\14\1\25\2\14\3\25\15\14\1\33"
				+ "\1\34\5\14\1\35\1\36\5\14\1\37\2\14\1\40"
				+ "\3\14\1\41\17\14\1\42\26\14\1\42\16\14\44\43"
				+ "\4\14\2\44\1\45\1\46\1\47\24\44\1\45\1\44"
				+ "\2\14\3\44\1\14\1\50\2\14\30\0\1\51\1\0"
				+ "\1\52\2\0\1\53\3\0\1\51\1\53\1\52\4\0"
				+ "\1\14\1\54\1\55\1\14\44\56\10\57\1\60\37\57"
				+ "\54\0\1\61\4\0\1\61\1\62\2\61\1\63\1\64"
				+ "\1\61\1\65\1\66\4\61\1\67\4\61\1\70\1\61"
				+ "\1\0\1\61\2\0\3\61\12\0\1\71\26\0\1\71"
				+ "\12\0\10\2\1\20\7\2\1\72\27\2\6\0\1\21"
				+ "\26\0\1\21\32\0\1\73\41\0\1\24\41\0\3\25"
				+ "\1\0\27\25\2\0\3\25\12\0\1\25\26\0\1\25"
				+ "\16\0\3\25\1\0\4\25\1\74\22\25\2\0\3\25"
				+ "\10\0\3\25\1\0\12\25\1\75\14\25\2\0\3\25"
				+ "\10\0\3\25\1\0\4\25\1\76\1\25\1\77\20\25"
				+ "\2\0\3\25\10\0\3\25\1\0\10\25\1\100\16\25"
				+ "\2\0\3\25\26\0\1\101\43\0\1\102\64\0\1\103"
				+ "\43\0\1\104\2\0\1\105\42\0\1\106\42\0\1\107"
				+ "\43\0\1\110\5\0\1\111\4\0\1\112\26\0\1\42"
				+ "\26\0\1\42\16\0\44\43\4\0\3\44\1\0\27\44"
				+ "\2\0\3\44\12\0\1\113\26\0\1\113\11\0\1\114"
				+ "\6\0\1\44\26\0\1\44\32\0\1\115\35\0\1\116"
				+ "\26\0\1\116\47\0\1\117\4\0\1\117\13\0\1\120"
				+ "\26\0\1\120\6\0\1\120\5\0\1\55\51\0\44\56"
				+ "\20\0\1\121\33\0\1\61\4\0\24\61\1\0\1\61"
				+ "\2\0\3\61\10\0\1\61\4\0\15\61\1\122\6\61"
				+ "\1\0\1\61\2\0\3\61\10\0\1\61\4\0\5\61"
				+ "\1\123\16\61\1\0\1\61\2\0\3\61\10\0\1\61"
				+ "\4\0\1\124\23\61\1\0\1\61\2\0\3\61\10\0"
				+ "\1\61\4\0\14\61\1\125\7\61\1\0\1\61\2\0"
				+ "\3\61\10\0\1\61\4\0\16\61\1\126\5\61\1\0"
				+ "\1\61\2\0\3\61\10\0\1\61\4\0\3\61\1\127"
				+ "\20\61\1\0\1\61\2\0\3\61\10\0\1\61\4\0"
				+ "\11\61\1\130\12\61\1\0\1\61\2\0\3\61\4\0"
				+ "\10\2\1\20\14\2\1\131\22\2\25\0\1\132\26\0"
				+ "\3\25\1\0\5\25\1\133\21\25\2\0\3\25\10\0"
				+ "\3\25\1\0\2\25\1\134\24\25\2\0\3\25\10\0"
				+ "\3\25\1\0\22\25\1\134\4\25\2\0\3\25\10\0"
				+ "\3\25\1\0\15\25\1\135\11\25\2\0\3\25\10\0"
				+ "\3\25\1\0\21\25\1\136\5\25\2\0\3\25\36\0"
				+ "\1\137\26\0\1\140\56\0\1\141\42\0\1\142\63\0"
				+ "\1\143\41\0\1\144\50\0\1\145\6\0\1\146\50\0"
				+ "\1\146\42\0\1\147\54\0\1\142\42\0\1\150\30\0"
				+ "\1\116\26\0\1\116\10\0\1\151\1\152\25\0\1\153"
				+ "\26\0\1\61\4\0\3\61\1\154\20\61\1\0\1\61"
				+ "\2\0\3\61\10\0\1\61\4\0\2\61\1\155\21\61"
				+ "\1\0\1\61\2\0\3\61\10\0\1\61\4\0\1\61"
				+ "\1\156\22\61\1\0\1\61\2\0\3\61\10\0\1\61"
				+ "\4\0\4\61\1\157\17\61\1\0\1\61\2\0\3\61"
				+ "\10\0\1\61\4\0\2\61\1\160\21\61\1\0\1\61"
				+ "\2\0\3\61\10\0\1\61\4\0\2\61\1\161\21\61"
				+ "\1\0\1\61\2\0\3\61\10\0\1\61\4\0\21\61"
				+ "\1\162\2\61\1\0\1\61\2\0\3\61\4\0\10\2"
				+ "\1\20\4\2\1\55\32\2\15\0\1\55\36\0\3\25"
				+ "\1\0\6\25\1\163\20\25\2\0\3\25\10\0\3\25"
				+ "\1\0\13\25\1\164\13\25\2\0\3\25\10\0\3\25"
				+ "\1\0\16\25\1\165\10\25\2\0\3\25\10\0\3\25"
				+ "\1\0\17\25\1\166\7\25\2\0\3\25\26\0\1\167"
				+ "\36\0\1\170\63\0\1\171\42\0\1\146\43\0\1\110"
				+ "\5\0\1\111\7\0\1\172\2\0\1\146\32\0\1\173"
				+ "\46\0\1\146\45\0\1\146\47\0\1\174\47\0\1\175"
				+ "\36\0\1\61\4\0\1\176\23\61\1\0\1\61\2\0"
				+ "\3\61\10\0\1\61\4\0\1\177\23\61\1\0\1\61"
				+ "\2\0\3\61\10\0\1\61\4\0\15\61\1\200\6\61"
				+ "\1\0\1\61\2\0\3\61\10\0\1\61\4\0\4\61"
				+ "\1\201\17\61\1\0\1\61\2\0\3\61\10\0\1\61"
				+ "\4\0\7\61\1\202\14\61\1\0\1\61\2\0\3\61"
				+ "\10\0\1\61\4\0\2\61\1\203\21\61\1\0\1\61"
				+ "\2\0\3\61\10\0\3\25\1\0\7\25\1\204\17\25"
				+ "\2\0\3\25\10\0\3\25\1\0\11\25\1\205\15\25"
				+ "\2\0\3\25\10\0\3\25\1\0\15\25\1\164\11\25"
				+ "\2\0\3\25\17\0\1\206\53\0\1\207\51\0\1\146"
				+ "\46\0\1\210\60\0\1\211\22\0\1\61\4\0\7\61"
				+ "\1\212\14\61\1\0\1\61\2\0\3\61\10\0\1\61"
				+ "\4\0\22\61\1\213\1\61\1\0\1\61\2\0\3\61"
				+ "\10\0\1\61\4\0\3\61\1\214\20\61\1\0\1\61"
				+ "\2\0\3\61\10\0\1\61\4\0\7\61\1\215\14\61"
				+ "\1\0\1\61\2\0\3\61\10\0\1\61\4\0\1\61"
				+ "\1\216\22\61\1\0\1\61\2\0\3\61\10\0\1\61"
				+ "\4\0\7\61\1\217\14\61\1\0\1\61\2\0\3\61"
				+ "\10\0\3\25\1\0\10\25\1\164\16\25\2\0\3\25"
				+ "\10\0\3\25\1\0\17\25\1\220\7\25\2\0\3\25"
				+ "\24\0\1\221\63\0\1\222\44\0\1\146\36\0\1\110"
				+ "\33\0\1\61\4\0\11\61\1\223\12\61\1\0\1\61"
				+ "\2\0\3\61\10\0\1\61\4\0\1\224\23\61\1\0"
				+ "\1\61\2\0\3\61\10\0\1\61\4\0\13\61\1\225"
				+ "\10\61\1\0\1\61\2\0\3\61\10\0\1\61\4\0"
				+ "\15\61\1\226\6\61\1\0\1\61\2\0\3\61\10\0"
				+ "\1\61\4\0\14\61\1\227\7\61\1\0\1\61\2\0"
				+ "\3\61\10\0\3\25\1\0\4\25\1\166\22\25\2\0"
				+ "\3\25\25\0\1\211\63\0\1\146\16\0\1\61\4\0"
				+ "\21\61\1\230\2\61\1\0\1\61\2\0\3\61\10\0"
				+ "\1\61\4\0\7\61\1\231\14\61\1\0\1\61\2\0"
				+ "\3\61\10\0\1\61\4\0\16\61\1\232\5\61\1\0"
				+ "\1\61\2\0\3\61\10\0\1\61\4\0\11\61\1\233"
				+ "\12\61\1\0\1\61\2\0\3\61\10\0\1\61\4\0"
				+ "\10\61\1\234\13\61\1\0\1\61\2\0\3\61\10\0"
				+ "\1\61\4\0\1\61\1\235\22\61\1\0\1\61\2\0"
				+ "\3\61\5\0\1\236\2\237\1\61\4\0\24\61\1\0"
				+ "\1\61\2\0\3\61\10\0\1\61\4\0\14\61\1\240"
				+ "\7\61\1\0\1\61\2\0\3\61\10\0\1\61\4\0"
				+ "\6\61\1\241\15\61\1\0\1\61\2\0\3\61\6\0"
				+ "\1\237\5\0\1\242\47\0\1\242\43\0\1\61\4\0"
				+ "\16\61\1\243\5\61\1\0\1\61\2\0\3\61\10\0"
				+ "\1\61\4\0\7\61\1\244\14\61\1\0\1\61\2\0"
				+ "\3\61\24\0\1\245\33\0\1\61\4\0\10\61\1\246"
				+ "\13\61\1\0\1\61\2\0\3\61\31\0\1\247\26\0"
				+ "\1\61\4\0\16\61\1\250\5\61\1\0\1\61\2\0"
				+ "\3\61\21\0\1\251\36\0\1\61\4\0\3\61\1\252"
				+ "\20\61\1\0\1\61\2\0\3\61\10\0\1\61\4\0"
				+ "\14\61\1\253\7\61\1\0\1\61\2\0\3\61\10\0"
				+ "\1\61\4\0\1\61\1\254\22\61\1\0\1\61\2\0"
				+ "\3\61\5\0\1\255\2\256\1\61\4\0\24\61\1\0"
				+ "\1\61\2\0\3\61\6\0\1\256\5\0\1\257\47\0"
				+ "\1\257\57\0\1\260\54\0\1\261\37\0\1\262\32\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[6200];
		int offset = 0;
		offset = zzUnpackTrans( ZZ_TRANS_PACKED_0, offset, result );
		return result;
	}

	private static int zzUnpackTrans( String packed, int offset, int[] result ) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while ( i < l ) {
			int count = packed.charAt( i++ );
			int value = packed.charAt( i++ );
			value--;
			do
				result[j++] = value;
			while ( --count > 0 );
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\13\0\1\11\1\1\1\11\1\1\1\0\3\1\1\11"
				+ "\24\1\2\0\1\11\1\1\1\11\1\1\1\11\12\1"
				+ "\2\0\5\1\13\0\1\11\2\0\2\1\1\0\7\1"
				+ "\2\0\4\1\4\0\1\1\2\0\1\11\2\0\2\11"
				+ "\1\0\13\1\5\0\2\11\10\1\4\0\7\1\2\0"
				+ "\13\1\2\0\2\1\1\0\2\1\1\0\1\1\1\0"
				+ "\1\1\1\11\3\1\5\0\1\11";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[178];
		int offset = 0;
		offset = zzUnpackAttribute( ZZ_ATTRIBUTE_PACKED_0, offset, result );
		return result;
	}

	private static int zzUnpackAttribute( String packed, int offset,
			int[] result ) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while ( i < l ) {
			int count = packed.charAt( i++ );
			int value = packed.charAt( i++ );
			do
				result[j++] = value;
			while ( --count > 0 );
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	/**
	 * Add new timestamp
	 */
	protected void addTimeStamp( Long timestamp ) {
		countChangesAdded++;
		minInterval = Math.min( getMinInterval(), (timestamp - lastTimestamp) );
		lastTimestamp = timestamp;
		if ( (countChangesAdded & 0x1FFF) == 0 ) {
			countChangesAdded = 0;
			parser.setProgress( (int) (((long) yychar) * 100 / fileSize) );
		}
	}

	/**
	 * Creates a new scanner
	 * There is also a java.io.InputStream version of this constructor.
	 * 
	 * @param in
	 *        the java.io.Reader to read input from.
	 */
	public VCDStructLexer( java.io.Reader in ) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner.
	 * There is also java.io.Reader version of this constructor.
	 * 
	 * @param in
	 *        the java.io.Inputstream to read input from.
	 */
	public VCDStructLexer( java.io.InputStream in ) {
		this( new java.io.InputStreamReader( in ) );
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *        the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap( String packed ) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while ( i < 122 ) {
			int count = packed.charAt( i++ );
			char value = packed.charAt( i++ );
			do
				map[j++] = value;
			while ( --count > 0 );
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *            if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if ( zzStartRead > 0 ) {
			System.arraycopy( zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
				- zzStartRead );

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if ( zzCurrentPos >= zzBuffer.length ) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy( zzBuffer, 0, newBuffer, 0, zzBuffer.length );
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead =
				zzReader.read( zzBuffer, zzEndRead, zzBuffer.length - zzEndRead );

		if ( numRead > 0 ) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of
		// stream
		if ( numRead == 0 ) {
			int c = zzReader.read();
			if ( c == -1 ) {
				return true;
			}
			else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if ( zzReader != null ) zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 * 
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *        the new input stream
	 */
	public final void yyreset( java.io.Reader reader ) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *        the new lexical state
	 */
	public final void yybegin( int newState ) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String( zzBuffer, zzStartRead, zzMarkedPos - zzStartRead );
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *        the position of the character to fetch.
	 *        A value from 0 to yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat( int pos ) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 * 
	 * @param errorCode
	 *        the code of the errormessage to display
	 */
	private void zzScanError( int errorCode ) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch ( ArrayIndexOutOfBoundsException e ) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error( message );
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *        the number of characters to be read again.
	 *        This number must not be greater than yylength()!
	 */
	public void yypushback( int number ) {
		if ( number > yylength() ) zzScanError( ZZ_PUSHBACK_2BIG );

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *            if any I/O-Error occurs
	 */
	public Object yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while ( true ) {
			zzMarkedPosL = zzMarkedPos;

			yychar += zzMarkedPosL - zzStartRead;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			zzForAction: {
				while ( true ) {

					if ( zzCurrentPosL < zzEndReadL )
						zzInput = zzBufferL[zzCurrentPosL++];
					else
						if ( zzAtEOF ) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							// store back cached positions
							zzCurrentPos = zzCurrentPosL;
							zzMarkedPos = zzMarkedPosL;
							boolean eof = zzRefill();
							// get translated positions and possibly new buffer
							zzCurrentPosL = zzCurrentPos;
							zzMarkedPosL = zzMarkedPos;
							zzBufferL = zzBuffer;
							zzEndReadL = zzEndRead;
							if ( eof ) {
								zzInput = YYEOF;
								break zzForAction;
							}
							else {
								zzInput = zzBufferL[zzCurrentPosL++];
							}
						}
					int zzNext =
							zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if ( zzNext == -1 ) break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ( (zzAttributes & 1) == 1 ) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ( (zzAttributes & 8) == 8 ) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch ( zzAction < 0 ? zzAction : ZZ_ACTION[zzAction] ) {
			case 21: {
				yybegin( YYINITIAL );
				endVar();
			}
			case 28:
				break;
			case 15: {
				var.setLsb( Integer.valueOf( yytext().substring( 0,
						yytext().length() - 1 ) ) );
			}
			case 29:
				break;
			case 8: {
				var.setReference( yytext() );
			}
			case 30:
				break;
			case 20: {
				currentScope.setType( yytext() );
			}
			case 31:
				break;
			case 3: {
				setTimeScaleValue( Integer.valueOf( yytext() ) );
			}
			case 32:
				break;
			case 16: {
				var.setType( yytext() );
				yybegin( VAR_SIZE );
			}
			case 33:
				break;
			case 5: {
				currentScope.setName( yytext() );
			}
			case 34:
				break;
			case 10: {
				yybegin( YYINITIAL );
			}
			case 35:
				break;
			case 4: {
				setTimeScaleUnit( yytext() );
			}
			case 36:
				break;
			case 17: {
				var.setMsb( Integer.valueOf( yytext().substring( 1,
						yytext().length() - 1 ) ) );
			}
			case 37:
				break;
			case 24: {
				commentBuffer.append( "Found comment: " );
				yybegin( COMMENT );
			}
			case 38:
				break;
			case 23: {
				createNewScope();
				yybegin( SCOPE );
			}
			case 39:
				break;
			case 2: {
				yypushback( 1 );
				yybegin( VALUE_CHANGE );
			}
			case 40:
				break;
			case 18: {
				var.setBitNr( Integer.valueOf( yytext().substring( 1,
						yytext().length() - 1 ) ) );
				appendToCompoundVar();
			}
			case 41:
				break;
			case 12: {
				commentBuffer.append( yytext() );
			}
			case 42:
				break;
			case 22: {
				yybegin( YYINITIAL );
				printComment();
			}
			case 43:
				break;
			case 9: {
				yybegin( VALUE_CHANGE_ID );
			}
			case 44:
				break;
			case 6: {
				var.setBitWidth( Integer.valueOf( yytext() ) );
				yybegin( VAR_ID );
			}
			case 45:
				break;
			case 27: {
				createChangesMap();
			}
			case 46:
				break;
			case 11: {
				addVarChange( yytext() );
			}
			case 47:
				break;
			case 26: {
				setCurrentScope( (Scope) getCurrentScope().getParent() );
			}
			case 48:
				break;
			case 14: {
				if (interrupted) return null; addTimeStamp( Long.valueOf( yytext().substring( 1 ) ) );
			}
			case 49:
				break;
			case 13: {
				yybegin( IGNORED );
			}
			case 50:
				break;
			case 25: {
				yybegin( TIMESCALE );
			}
			case 51:
				break;
			case 19: {
				if (interrupted) return null; 
				beginVar();
				yybegin( VAR );
			}
			case 52:
				break;
			case 1: {}
			case 53:
				break;
			case 7: {
				var.setId( yytext() );
				yybegin( VAR_REF );
			}
			case 54:
				break;
			default:
				if ( zzInput == YYEOF && zzStartRead == zzCurrentPos ) {
					zzAtEOF = true;
					switch ( zzLexicalState ) {
					case YYINITIAL: {
						return null;
					}
					case 179:
						break;
					default:
						return null;
					}
				}
				else {
					zzScanError( ZZ_NO_MATCH );
				}
			}
		}
	}

}