/* The following code was generated by JFlex 1.4.1 on 8/6/11 12:09 AM */

/*
 * This file is part of the VVIDE project.
 * 
 * Copyright (C) 2011 Pavel Fischer rubbiroid@gmail.com
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

/*
 * Generated on 7/30/11 2:49 PM
 */
package vvide.ui.views.editor.verilog;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/6/11 12:09 AM from the specification file
 * <tt>/tmp/waveformstudio/ui/views/editor/verilog/VerilogLexer.flex</tt>
 */
public class VerilogLexer extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\21\1\72\1\15"+
    "\1\20\1\45\1\43\1\46\1\7\2\44\1\23\1\31\1\42\1\31"+
    "\1\32\1\22\1\4\1\71\2\16\4\6\2\3\1\53\1\42\1\74"+
    "\1\73\1\75\1\43\1\20\3\5\1\26\1\30\1\26\5\1\1\25"+
    "\13\1\1\24\2\1\1\44\1\11\1\44\1\76\1\2\1\55\1\36"+
    "\1\14\1\56\1\57\1\35\1\27\1\62\1\50\1\52\1\70\1\67"+
    "\1\37\1\60\1\13\1\65\1\51\1\1\1\34\1\40\1\33\1\12"+
    "\1\66\1\54\1\63\1\61\1\64\1\41\1\77\1\41\1\47\105\0"+
    "\1\1\21\0\1\1\5\0\1\1\7\0\1\1\21\0\1\1\5\0"+
    "\1\1\uff03\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\1\1\3\4\1\1\4\1\5"+
    "\1\4\6\1\1\6\1\1\2\4\12\1\1\4\1\1"+
    "\3\4\4\7\1\10\3\7\1\0\1\11\1\2\1\12"+
    "\1\11\1\12\1\11\1\13\1\11\2\0\6\1\2\0"+
    "\1\14\1\15\1\16\15\1\6\0\4\1\1\17\2\1"+
    "\3\0\7\1\1\4\1\1\1\20\5\0\1\12\1\0"+
    "\2\13\1\21\3\0\2\1\1\4\1\0\10\1\1\22"+
    "\1\17\3\1\17\0\5\1\3\0\6\1\6\0\2\1"+
    "\1\0\2\1\1\22\7\1\21\0\5\1\3\0\1\17"+
    "\2\1\2\0\1\23\2\0\2\1\1\0\4\1\6\0"+
    "\1\24\10\0\5\1\3\0\1\1\5\0\3\1\15\0"+
    "\4\1\5\0\1\24\6\0\2\1\1\0\1\17\1\0"+
    "\2\24\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\300\0\u0200\0\u0240\0\u0280\0\u02c0\0\300\0\u0300\0\u0340"+
    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\300\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900"+
    "\0\u0940\0\300\0\u0980\0\u09c0\0\u0a00\0\300\0\u0a40\0\u0a80"+
    "\0\u0ac0\0\u0b00\0\u0b40\0\u0b40\0\u0b40\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u02c0\0\u0ec0\0\300\0\300\0\300\0\u0f00"+
    "\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u0100\0\u14c0"+
    "\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0"+
    "\0\u1700\0\u1740\0\u1780\0\u0100\0\u17c0\0\300\0\u1800\0\u1840"+
    "\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u0b40\0\u19c0\0\300"+
    "\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0"+
    "\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u0100"+
    "\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80"+
    "\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180"+
    "\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380"+
    "\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580"+
    "\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780"+
    "\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980"+
    "\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80"+
    "\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80"+
    "\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80"+
    "\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180"+
    "\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380"+
    "\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580"+
    "\0\u35c0\0\u3600\0\300\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740"+
    "\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940"+
    "\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3240\0\u3ac0\0\u3b00"+
    "\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u3d00"+
    "\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00"+
    "\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0\0\u4100"+
    "\0\u4140\0\u4180\0\u3c80\0\u41c0\0\u4200\0\u4240\0\u4280\0\u42c0"+
    "\0\u4300\0\u4340\0\u4380\0\u43c0\0\300\0\u4400\0\u4440\0\u4480"+
    "\0\u44c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\5\1\6\1\10\1\11"+
    "\1\12\1\5\1\13\1\14\1\15\1\6\1\4\1\16"+
    "\1\17\1\20\1\16\3\5\1\21\1\5\1\16\1\22"+
    "\1\23\1\24\1\25\1\26\2\5\1\27\1\4\1\16"+
    "\1\27\1\30\1\31\1\32\1\5\1\33\1\34\1\16"+
    "\1\35\1\36\1\37\1\40\1\41\2\5\1\42\1\5"+
    "\1\43\2\5\1\44\1\6\1\45\1\46\1\47\1\50"+
    "\1\16\1\51\10\52\1\0\1\53\11\52\1\54\54\52"+
    "\10\55\1\56\16\55\1\57\20\55\1\60\3\55\1\61"+
    "\23\55\101\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\6\5\7\0\3\5\1\0\1\5"+
    "\1\0\14\5\6\0\3\63\2\6\1\63\1\6\2\0"+
    "\4\63\1\0\1\6\1\0\1\63\3\0\1\63\1\64"+
    "\2\65\1\66\1\0\1\67\2\63\1\66\1\63\1\64"+
    "\1\63\4\0\1\63\2\0\3\63\1\0\3\63\1\65"+
    "\11\63\1\6\6\0\3\63\1\70\1\71\1\63\1\71"+
    "\2\0\4\63\1\0\1\71\1\0\1\63\3\0\1\72"+
    "\1\64\2\65\1\66\1\0\1\67\2\63\1\66\1\63"+
    "\1\64\1\63\4\0\1\63\2\0\3\63\1\0\3\63"+
    "\1\65\3\63\1\72\5\63\1\71\6\0\7\73\1\0"+
    "\1\73\1\74\66\73\3\0\2\5\1\0\1\5\7\0"+
    "\1\5\52\0\1\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\2\5\1\75\1\76"+
    "\2\5\7\0\3\5\1\0\1\5\1\0\2\5\1\77"+
    "\4\5\1\100\4\5\7\0\6\5\2\0\1\62\1\101"+
    "\2\5\1\0\1\5\5\0\5\5\2\0\2\5\1\102"+
    "\3\5\7\0\3\5\1\0\1\5\1\0\14\5\6\0"+
    "\10\103\1\0\1\104\3\103\1\105\62\103\21\0\1\17"+
    "\100\0\1\106\1\107\55\0\6\5\2\0\1\62\1\110"+
    "\2\5\1\0\1\5\5\0\5\5\2\0\6\5\7\0"+
    "\3\5\1\0\1\5\1\0\7\5\1\111\4\5\11\0"+
    "\2\67\1\0\1\67\7\0\1\67\52\0\1\67\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\1\5\1\112\1\5\1\113\2\5\7\0\2\5"+
    "\1\114\1\0\1\5\1\0\14\5\7\0\6\5\2\0"+
    "\1\62\1\5\1\115\1\5\1\0\1\5\5\0\5\5"+
    "\2\0\1\116\1\5\1\117\3\5\7\0\1\5\1\115"+
    "\1\5\1\0\1\5\1\0\1\115\13\5\7\0\6\5"+
    "\2\0\1\62\1\5\1\120\1\5\1\0\1\5\5\0"+
    "\5\5\2\0\4\5\1\121\1\5\7\0\3\5\1\0"+
    "\1\5\1\0\14\5\7\0\6\5\2\0\1\62\1\5"+
    "\1\122\1\5\1\0\1\5\5\0\5\5\2\0\4\5"+
    "\1\123\1\124\7\0\3\5\1\0\1\5\1\0\14\5"+
    "\35\0\1\125\3\0\1\126\1\127\3\0\1\130\16\0"+
    "\1\131\1\132\65\0\1\16\77\0\1\16\27\0\2\16"+
    "\1\0\6\5\2\0\1\62\1\133\2\5\1\0\1\5"+
    "\5\0\5\5\2\0\1\5\1\134\4\5\7\0\3\5"+
    "\1\0\1\5\1\0\2\5\1\77\4\5\1\135\4\5"+
    "\7\0\6\5\2\0\1\62\1\5\1\136\1\5\1\0"+
    "\1\5\5\0\3\5\1\137\1\5\2\0\6\5\7\0"+
    "\3\5\1\0\1\5\1\0\14\5\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\6\5"+
    "\7\0\1\140\1\5\1\141\1\0\1\5\1\0\14\5"+
    "\41\0\1\142\16\0\1\143\4\0\1\144\21\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\5\5\2\0"+
    "\3\5\1\145\2\5\7\0\3\5\1\0\1\5\1\0"+
    "\2\5\1\77\11\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\2\5\1\146\3\5"+
    "\7\0\2\5\1\147\1\0\1\5\1\0\14\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\6\5\7\0\3\5\1\0\1\5\1\0\7\5"+
    "\1\150\4\5\7\0\6\5\2\0\1\62\1\5\1\151"+
    "\1\5\1\0\1\5\5\0\5\5\2\0\6\5\7\0"+
    "\3\5\1\0\1\5\1\0\7\5\1\152\4\5\7\0"+
    "\6\5\2\0\1\62\1\153\2\5\1\0\1\5\5\0"+
    "\5\5\2\0\1\5\1\154\4\5\7\0\3\5\1\0"+
    "\1\5\1\0\14\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\6\5\7\0\3\5"+
    "\1\0\1\5\1\0\7\5\1\155\4\5\101\0\1\16"+
    "\53\0\1\16\23\0\1\45\77\0\2\16\76\0\1\16"+
    "\1\0\1\16\101\0\1\16\13\0\1\52\106\0\1\156"+
    "\55\0\10\55\1\0\16\55\1\0\20\55\1\0\3\55"+
    "\1\0\23\55\33\0\1\157\16\0\1\160\60\0\1\161"+
    "\120\0\1\162\26\0\2\5\1\0\1\5\3\0\1\163"+
    "\3\0\1\5\52\0\1\5\6\0\7\63\2\0\4\63"+
    "\1\0\1\63\1\0\1\63\3\0\5\63\2\0\6\63"+
    "\4\0\1\63\2\0\3\63\1\0\16\63\6\0\3\63"+
    "\2\164\1\63\1\164\2\0\4\63\1\0\1\164\1\0"+
    "\1\63\3\0\5\63\1\165\1\0\6\63\4\0\1\63"+
    "\2\0\3\63\1\0\15\63\1\164\6\0\3\63\2\67"+
    "\1\63\1\67\2\0\4\63\1\0\1\67\1\0\1\63"+
    "\3\0\2\63\2\65\1\66\2\0\2\63\1\66\3\63"+
    "\4\0\1\63\2\0\3\63\1\0\3\63\1\65\11\63"+
    "\1\67\6\0\3\63\2\70\1\63\1\70\2\0\4\63"+
    "\1\0\1\70\1\0\1\63\3\0\2\63\2\65\1\66"+
    "\1\0\1\67\2\63\1\66\3\63\4\0\1\63\2\0"+
    "\3\63\1\0\3\63\1\65\11\63\1\70\6\0\3\63"+
    "\1\70\1\71\1\63\1\71\2\0\4\63\1\0\1\71"+
    "\1\0\1\63\3\0\1\63\1\166\2\65\1\66\1\0"+
    "\1\67\2\63\1\66\1\63\1\166\1\63\4\0\1\63"+
    "\2\0\3\63\1\0\3\63\1\65\11\63\1\71\6\0"+
    "\3\63\4\167\2\0\3\63\1\167\1\0\1\167\1\0"+
    "\1\63\3\0\2\63\3\167\2\0\2\63\2\167\2\63"+
    "\4\0\1\63\2\0\3\63\1\0\2\63\2\167\11\63"+
    "\1\167\15\0\1\170\74\0\1\171\1\0\1\172\1\73"+
    "\1\0\1\73\1\173\3\73\1\171\10\0\1\73\3\0"+
    "\2\73\34\0\1\171\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\6\5\7\0\3\5"+
    "\1\0\1\5\1\0\4\5\1\174\7\5\7\0\6\5"+
    "\2\0\1\62\1\5\1\122\1\5\1\0\1\5\5\0"+
    "\5\5\2\0\6\5\7\0\3\5\1\0\1\5\1\0"+
    "\14\5\7\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\6\5\7\0\3\5\1\0\1\5"+
    "\1\0\7\5\1\175\4\5\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\1\176\1\154"+
    "\4\5\7\0\3\5\1\0\1\5\1\0\14\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\3\5"+
    "\1\176\1\5\2\0\6\5\7\0\3\5\1\0\1\5"+
    "\1\0\14\5\7\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\5\5\2\0\6\5\7\0\3\5\1\0"+
    "\1\5\1\0\4\5\1\155\7\5\12\0\1\103\1\0"+
    "\2\103\1\0\1\103\1\177\4\103\10\0\1\103\3\0"+
    "\2\103\34\0\1\103\7\0\6\5\2\0\1\62\1\5"+
    "\1\200\1\5\1\0\1\5\5\0\5\5\2\0\6\5"+
    "\7\0\3\5\1\0\1\5\1\0\14\5\7\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\5\5\2\0"+
    "\1\5\1\201\4\5\7\0\3\5\1\0\1\5\1\0"+
    "\14\5\7\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\3\5\1\202\2\5\7\0\3\5"+
    "\1\0\1\5\1\0\14\5\7\0\6\5\2\0\1\62"+
    "\2\5\1\203\1\0\1\5\5\0\5\5\2\0\5\5"+
    "\1\204\7\0\3\5\1\0\1\5\1\0\14\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\6\5\7\0\3\5\1\0\1\5\1\0\2\5"+
    "\1\205\11\5\7\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\5\5\2\0\6\5\7\0\3\5\1\0"+
    "\1\5\1\0\2\5\1\77\11\5\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\1\5"+
    "\1\112\4\5\7\0\3\5\1\0\1\5\1\0\14\5"+
    "\7\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\5\5\2\0\3\5\1\206\2\5\7\0\1\5\1\207"+
    "\1\5\1\0\1\5\1\0\4\5\1\210\7\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\6\5\7\0\3\5\1\0\1\5\1\0\1\5"+
    "\1\211\12\5\7\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\5\5\2\0\5\5\1\212\7\0\3\5"+
    "\1\0\1\5\1\0\14\5\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\6\5\7\0"+
    "\3\5\1\0\1\5\1\0\1\5\1\154\12\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\6\5\7\0\3\5\1\0\1\213\1\0\14\5"+
    "\7\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\5\5\2\0\5\5\1\214\7\0\3\5\1\0\1\5"+
    "\1\0\14\5\46\0\1\215\11\0\1\216\1\0\1\217"+
    "\2\0\1\220\1\221\4\0\1\222\64\0\1\223\62\0"+
    "\1\224\1\225\74\0\1\226\14\0\1\227\5\0\1\230"+
    "\33\0\1\231\37\0\1\232\112\0\1\233\13\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\5\5\2\0"+
    "\4\5\1\234\1\5\7\0\3\5\1\0\1\5\1\0"+
    "\14\5\7\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\6\5\7\0\2\5\1\235\1\0"+
    "\1\5\1\0\14\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\5\5\1\174\7\0"+
    "\3\5\1\0\1\5\1\0\14\5\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\1\236"+
    "\5\5\7\0\1\5\1\237\1\240\1\0\1\5\1\0"+
    "\7\5\1\237\4\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\6\5\7\0\2\5"+
    "\1\203\1\0\1\5\1\0\14\5\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\1\5"+
    "\1\212\4\5\7\0\3\5\1\0\1\5\1\0\14\5"+
    "\60\0\1\241\40\0\1\242\121\0\1\243\43\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\5\5\2\0"+
    "\5\5\1\244\7\0\3\5\1\0\1\5\1\0\14\5"+
    "\7\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\3\5\1\245\1\5\2\0\6\5\7\0\3\5\1\0"+
    "\1\5\1\0\14\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\5\5\1\246\7\0"+
    "\3\5\1\0\1\5\1\0\14\5\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\6\5"+
    "\7\0\3\5\1\0\1\5\1\0\1\5\1\247\12\5"+
    "\7\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\5\5\2\0\6\5\7\0\3\5\1\0\1\5\1\0"+
    "\7\5\1\152\4\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\1\5\1\154\4\5"+
    "\7\0\3\5\1\0\1\5\1\0\14\5\7\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\5\5\2\0"+
    "\1\250\5\5\7\0\3\5\1\0\1\5\1\0\14\5"+
    "\7\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\5\5\2\0\6\5\7\0\2\5\1\251\1\0\1\5"+
    "\1\0\14\5\57\0\1\252\65\0\1\253\73\0\1\254"+
    "\120\0\1\255\26\0\4\256\5\0\1\256\1\0\1\256"+
    "\7\0\3\256\4\0\2\256\17\0\2\256\11\0\1\256"+
    "\6\0\3\63\2\164\1\63\1\164\2\0\4\63\1\0"+
    "\1\164\1\0\1\63\3\0\2\63\2\65\1\63\2\0"+
    "\6\63\4\0\1\63\2\0\3\63\1\0\3\63\1\65"+
    "\11\63\1\164\11\0\2\164\1\0\1\164\7\0\1\164"+
    "\52\0\1\164\6\0\3\63\4\167\2\0\3\63\1\167"+
    "\1\0\1\167\1\0\1\63\3\0\1\63\1\166\3\167"+
    "\2\0\2\63\2\167\1\166\1\63\4\0\1\63\2\0"+
    "\3\63\1\0\2\63\2\167\11\63\1\167\12\0\1\172"+
    "\1\0\1\172\1\170\6\0\1\172\52\0\1\172\12\0"+
    "\1\73\1\0\1\73\1\170\6\0\1\73\52\0\1\73"+
    "\11\0\4\257\5\0\1\257\1\0\1\257\7\0\3\257"+
    "\4\0\2\257\17\0\2\257\11\0\1\257\7\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\5\5\2\0"+
    "\2\5\1\260\3\5\7\0\3\5\1\0\1\5\1\0"+
    "\14\5\7\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\5\5\1\210\7\0\3\5\1\0"+
    "\1\5\1\0\14\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\6\5\7\0\2\5"+
    "\1\261\1\0\1\5\1\0\14\5\11\0\4\262\5\0"+
    "\1\262\1\0\1\262\7\0\3\262\4\0\2\262\17\0"+
    "\2\262\11\0\1\262\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\6\5\7\0\3\5"+
    "\1\0\1\5\1\0\1\263\13\5\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\2\5"+
    "\1\264\3\5\7\0\3\5\1\0\1\5\1\0\11\5"+
    "\1\137\2\5\7\0\6\5\2\0\1\62\1\5\1\265"+
    "\1\5\1\0\1\5\5\0\5\5\2\0\6\5\7\0"+
    "\3\5\1\0\1\5\1\0\14\5\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\4\5"+
    "\1\212\1\5\7\0\3\5\1\0\1\5\1\0\14\5"+
    "\7\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\5\5\2\0\6\5\7\0\3\5\1\0\1\5\1\0"+
    "\11\5\1\137\2\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\2\5\1\210\3\5"+
    "\7\0\3\5\1\0\1\5\1\0\14\5\7\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\5\5\2\0"+
    "\4\5\1\210\1\5\7\0\3\5\1\0\1\5\1\0"+
    "\14\5\7\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\2\5\1\266\3\5\7\0\3\5"+
    "\1\0\1\5\1\0\14\5\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\3\5\1\267\1\5\2\0"+
    "\1\270\5\5\7\0\1\5\1\271\1\5\1\0\1\5"+
    "\1\0\1\272\1\5\1\41\11\5\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\2\5"+
    "\1\137\3\5\7\0\3\5\1\0\1\5\1\0\14\5"+
    "\7\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\5\5\2\0\3\5\1\273\2\5\7\0\3\5\1\0"+
    "\1\5\1\0\14\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\6\5\7\0\2\5"+
    "\1\274\1\0\1\5\1\0\14\5\41\0\1\275\57\0"+
    "\1\276\120\0\1\277\115\0\1\300\112\0\1\301\63\0"+
    "\1\302\106\0\1\303\55\0\1\304\1\0\1\305\52\0"+
    "\1\306\120\0\1\307\15\0\1\223\12\0\1\310\77\0"+
    "\1\311\77\0\1\312\72\0\1\313\57\0\1\314\52\0"+
    "\1\315\65\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\4\5\1\316\1\5\7\0\3\5"+
    "\1\0\1\5\1\0\14\5\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\6\5\7\0"+
    "\3\5\1\0\1\5\1\0\2\5\1\317\11\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\2\5\1\320\3\5\7\0\3\5\1\0\1\5"+
    "\1\0\14\5\7\0\6\5\2\0\1\62\1\321\2\5"+
    "\1\0\1\5\5\0\5\5\2\0\6\5\7\0\3\5"+
    "\1\0\1\5\1\0\14\5\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\1\322\5\5"+
    "\7\0\3\5\1\0\1\5\1\0\14\5\66\0\1\323"+
    "\75\0\1\324\50\0\1\325\51\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\2\5\1\326"+
    "\3\5\7\0\3\5\1\0\1\5\1\0\14\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\3\5\1\327\2\5\7\0\3\5\1\0\1\5"+
    "\1\0\14\5\7\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\5\5\2\0\3\5\1\330\2\5\7\0"+
    "\3\5\1\0\1\5\1\0\14\5\7\0\6\5\2\0"+
    "\1\62\1\203\2\5\1\0\1\5\5\0\5\5\2\0"+
    "\6\5\7\0\3\5\1\0\1\5\1\0\14\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\6\5\7\0\1\5\1\237\1\5\1\0\1\5"+
    "\1\0\14\5\7\0\6\5\2\0\1\62\1\5\1\137"+
    "\1\5\1\0\1\5\5\0\5\5\2\0\6\5\7\0"+
    "\3\5\1\0\1\5\1\0\14\5\61\0\1\331\61\0"+
    "\1\252\113\0\1\332\60\0\1\333\50\0\4\334\5\0"+
    "\1\334\1\0\1\334\7\0\3\334\4\0\2\334\17\0"+
    "\2\334\11\0\1\334\11\0\4\335\5\0\1\335\1\0"+
    "\1\335\7\0\3\335\4\0\2\335\17\0\2\335\11\0"+
    "\1\335\7\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\6\5\7\0\3\5\1\0\1\5"+
    "\1\0\1\5\1\336\12\5\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\3\5\1\337\1\5\2\0"+
    "\6\5\7\0\3\5\1\0\1\5\1\0\14\5\11\0"+
    "\4\340\5\0\1\340\1\0\1\340\7\0\3\340\4\0"+
    "\2\340\17\0\2\340\11\0\1\340\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\1\341"+
    "\5\5\7\0\3\5\1\0\1\5\1\0\14\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\6\5\7\0\3\5\1\0\1\5\1\0\10\5"+
    "\1\342\3\5\7\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\5\5\2\0\6\5\7\0\2\5\1\343"+
    "\1\0\1\5\1\0\14\5\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\3\5\1\321"+
    "\2\5\7\0\3\5\1\0\1\5\1\0\14\5\7\0"+
    "\6\5\2\0\1\62\1\110\2\5\1\0\1\5\5\0"+
    "\5\5\2\0\6\5\7\0\3\5\1\0\1\5\1\0"+
    "\14\5\7\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\3\5\1\113\2\5\7\0\3\5"+
    "\1\0\1\5\1\0\14\5\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\1\5\1\134"+
    "\4\5\7\0\3\5\1\0\1\5\1\0\14\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\3\5\1\121\2\5\7\0\3\5\1\0\1\5"+
    "\1\0\14\5\7\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\5\5\2\0\6\5\7\0\3\5\1\0"+
    "\1\5\1\0\3\5\1\344\10\5\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\6\5"+
    "\7\0\3\5\1\0\1\5\1\0\4\5\1\251\7\5"+
    "\42\0\1\345\115\0\1\346\77\0\1\347\65\0\1\350"+
    "\52\0\1\351\121\0\1\352\77\0\1\353\101\0\1\354"+
    "\75\0\1\355\121\0\1\356\105\0\1\357\63\0\1\353"+
    "\102\0\1\360\74\0\1\303\77\0\1\361\77\0\1\362"+
    "\100\0\1\363\26\0\6\5\2\0\1\62\1\364\2\5"+
    "\1\0\1\5\5\0\5\5\2\0\6\5\7\0\3\5"+
    "\1\0\1\5\1\0\1\5\1\365\12\5\7\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\5\5\2\0"+
    "\6\5\7\0\2\5\1\366\1\0\1\5\1\0\14\5"+
    "\7\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\5\5\2\0\6\5\7\0\3\5\1\0\1\5\1\0"+
    "\4\5\1\367\7\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\1\137\5\5\7\0"+
    "\3\5\1\0\1\5\1\0\14\5\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\6\5"+
    "\7\0\2\5\1\370\1\0\1\5\1\0\14\5\43\0"+
    "\1\371\101\0\1\372\112\0\1\373\26\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\6\5"+
    "\7\0\3\5\1\0\1\5\1\0\5\5\2\137\5\5"+
    "\7\0\6\5\2\0\1\62\1\374\2\5\1\0\1\5"+
    "\5\0\5\5\2\0\6\5\7\0\3\5\1\0\1\5"+
    "\1\0\14\5\7\0\6\5\2\0\1\62\2\5\1\203"+
    "\1\0\1\5\5\0\5\5\2\0\6\5\7\0\3\5"+
    "\1\0\1\5\1\0\14\5\30\0\1\375\115\0\1\252"+
    "\12\0\1\331\25\0\1\333\1\376\4\333\1\376\2\0"+
    "\3\333\1\0\1\333\1\0\1\376\1\0\1\333\1\376"+
    "\5\333\2\376\6\333\1\0\3\376\1\333\2\376\3\333"+
    "\1\376\1\333\1\0\14\333\2\376\7\0\4\377\5\0"+
    "\1\377\1\0\1\377\7\0\3\377\4\0\2\377\17\0"+
    "\2\377\11\0\1\377\11\0\4\u0100\5\0\1\u0100\1\0"+
    "\1\u0100\7\0\3\u0100\4\0\2\u0100\17\0\2\u0100\11\0"+
    "\1\u0100\7\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\6\5\7\0\3\5\1\0\1\5"+
    "\1\0\4\5\1\212\7\5\7\0\3\5\1\154\2\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\5\5\2\0"+
    "\6\5\7\0\3\5\1\0\1\5\1\0\13\5\1\154"+
    "\11\0\4\u0101\5\0\1\u0101\1\0\1\u0101\7\0\3\u0101"+
    "\4\0\2\u0101\17\0\2\u0101\11\0\1\u0101\7\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\5\5\2\0"+
    "\6\5\7\0\2\5\1\u0102\1\0\1\5\1\0\14\5"+
    "\7\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\5\5\2\0\2\5\1\u0103\3\5\7\0\3\5\1\0"+
    "\1\5\1\0\14\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\3\5\1\u0104\1\5\2\0\6\5"+
    "\7\0\3\5\1\0\1\5\1\0\14\5\7\0\6\5"+
    "\2\0\1\62\3\5\1\0\1\5\5\0\5\5\2\0"+
    "\5\5\1\137\7\0\3\5\1\0\1\5\1\0\14\5"+
    "\73\0\1\u0105\52\0\1\u0106\72\0\1\303\115\0\1\u0107"+
    "\100\0\1\u0108\40\0\1\353\117\0\1\126\77\0\1\353"+
    "\131\0\1\u0109\26\0\1\u010a\123\0\1\u010b\66\0\1\u010c"+
    "\6\0\1\u010d\26\0\1\u010e\1\u010f\50\0\1\u0110\73\0"+
    "\1\u0111\45\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\6\5\7\0\1\5\1\210\1\5"+
    "\1\0\1\5\1\0\14\5\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\6\5\7\0"+
    "\3\5\1\0\1\5\1\0\7\5\1\u0112\4\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\1\u0113\5\5\7\0\3\5\1\0\1\5\1\0"+
    "\14\5\7\0\6\5\2\0\1\62\3\5\1\0\1\5"+
    "\5\0\5\5\2\0\2\5\1\u0114\3\5\7\0\3\5"+
    "\1\0\1\5\1\0\14\5\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\3\5\1\u0115"+
    "\2\5\7\0\3\5\1\0\1\5\1\0\14\5\46\0"+
    "\1\u0116\51\0\1\u0117\100\0\1\u0118\65\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\4\5"+
    "\1\321\1\5\7\0\3\5\1\0\1\5\1\0\14\5"+
    "\30\0\1\333\60\0\4\5\5\0\1\5\1\0\1\5"+
    "\7\0\3\5\4\0\2\5\17\0\2\5\11\0\1\5"+
    "\11\0\4\73\5\0\1\73\1\0\1\73\7\0\3\73"+
    "\4\0\2\73\17\0\2\73\11\0\1\73\11\0\4\103"+
    "\5\0\1\103\1\0\1\103\7\0\3\103\4\0\2\103"+
    "\17\0\2\103\11\0\1\103\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\6\5\7\0"+
    "\3\5\1\0\1\5\1\0\7\5\1\251\4\5\7\0"+
    "\6\5\2\0\1\62\3\5\1\0\1\5\5\0\5\5"+
    "\2\0\1\5\1\137\4\5\7\0\3\5\1\0\1\5"+
    "\1\0\14\5\7\0\3\5\1\210\2\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\6\5\7\0"+
    "\3\5\1\0\1\5\1\0\13\5\1\210\22\0\1\303"+
    "\133\0\1\353\66\0\1\u0119\73\0\1\u011a\124\0\1\353"+
    "\54\0\1\u011b\120\0\1\230\73\0\1\u011c\64\0\1\u011d"+
    "\53\0\1\353\13\0\1\u011e\106\0\1\u011f\77\0\1\u0120"+
    "\126\0\1\u0121\13\0\6\5\2\0\1\62\3\5\1\0"+
    "\1\5\5\0\5\5\2\0\6\5\7\0\3\5\1\0"+
    "\1\u0122\1\0\14\5\7\0\6\5\2\0\1\62\3\5"+
    "\1\0\1\5\5\0\5\5\2\0\6\5\7\0\2\5"+
    "\1\u0123\1\0\1\5\1\0\14\5\7\0\6\5\2\0"+
    "\1\62\3\5\1\0\1\5\5\0\5\5\2\0\1\5"+
    "\1\210\4\5\7\0\3\5\1\0\1\5\1\0\14\5"+
    "\7\0\6\5\2\0\1\62\3\5\1\0\1\5\5\0"+
    "\5\5\2\0\4\5\1\137\1\5\7\0\3\5\1\0"+
    "\1\5\1\0\14\5\64\0\1\u0124\100\0\1\u0118\55\0"+
    "\1\u0125\100\0\1\u0126\126\0\1\u011f\51\0\1\303\77\0"+
    "\1\353\67\0\1\353\104\0\1\353\124\0\1\u0127\52\0"+
    "\1\u0128\44\0\6\5\2\0\1\62\1\5\1\210\1\5"+
    "\1\0\1\5\5\0\5\5\2\0\6\5\7\0\3\5"+
    "\1\0\1\5\1\0\14\5\7\0\6\5\2\0\1\62"+
    "\3\5\1\0\1\5\5\0\5\5\2\0\6\5\7\0"+
    "\3\5\1\0\1\5\1\0\10\5\1\212\3\5\44\0"+
    "\1\u0129\122\0\1\353\32\0\1\353\150\0\1\353\51\0"+
    "\1\u0118\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\4\1\1\11\10\1\1\11"+
    "\22\1\1\11\3\1\1\11\3\1\1\0\10\1\2\0"+
    "\6\1\2\0\3\11\15\1\6\0\7\1\3\0\11\1"+
    "\1\11\5\0\1\1\1\0\2\1\1\11\3\0\3\1"+
    "\1\0\15\1\17\0\5\1\3\0\6\1\6\0\2\1"+
    "\1\0\12\1\21\0\5\1\3\0\3\1\2\0\1\1"+
    "\2\0\2\1\1\0\4\1\6\0\1\11\10\0\5\1"+
    "\3\0\1\1\5\0\3\1\15\0\4\1\5\0\1\1"+
    "\6\0\2\1\1\0\1\11\1\0\2\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public VerilogLexer() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[]{"//", null};
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public VerilogLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public VerilogLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 17: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 22: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 23: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 24: break;
        case 11: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 25: break;
        case 10: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 26: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 27: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 28: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 29: break;
        case 8: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 30: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 31: break;
        case 20: 
          { addToken(Token.FUNCTION);
          }
        case 32: break;
        case 18: 
          { addToken(Token.DATA_TYPE);
          }
        case 33: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 34: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 35: break;
        case 19: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 36: break;
        case 9: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 37: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 38: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 39: break;
        case 7: 
          { 
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 298: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 299: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 300: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}