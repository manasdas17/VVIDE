/* The following code was generated by JFlex 1.4.1 on 8/6/11 12:09 AM */

/*
 * This file is part of the VVIDE project.
 * 
 * Copyright (C) 2011 Pavel Fischer rubbiroid@gmail.com
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

/*
 * Generated on 7/29/11 2:06 PM
 */
package vvide.ui.views.editor.vhdl;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/6/11 12:09 AM from the specification file
 * <tt>/tmp/waveformstudio/ui/views/editor/VHDLLexer.flex</tt>
 */
public class VHDLLexer extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\12\1\0\1\13\1\0\22\0\1\52\1\11\1\10"+
    "\1\11\1\34\1\11\1\53\1\7\2\32\1\53\1\21\1\11\1\14"+
    "\1\22\1\35\1\4\7\6\2\3\1\33\1\11\1\55\1\54\1\55"+
    "\1\11\1\11\1\27\1\5\1\42\1\17\1\20\1\26\1\43\1\36"+
    "\1\40\1\1\1\50\1\16\1\46\1\44\1\45\1\37\1\1\1\24"+
    "\1\30\1\23\1\25\1\51\1\41\1\15\1\47\1\1\1\32\1\0"+
    "\1\32\1\0\1\2\1\0\1\27\1\5\1\42\1\17\1\20\1\56"+
    "\1\43\1\57\1\40\1\1\1\50\1\16\1\46\1\44\1\45\1\37"+
    "\1\1\1\24\1\30\1\23\1\25\1\51\1\60\1\15\1\47\1\1"+
    "\1\31\1\0\1\31\1\11\105\0\1\1\21\0\1\1\5\0\1\1"+
    "\7\0\1\1\21\0\1\1\5\0\1\1\uff03\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\2\2\3\1\1\3\1\4\1\5\4\1"+
    "\1\5\7\1\1\6\1\1\1\5\11\1\1\7\1\10"+
    "\6\7\1\2\1\11\1\0\1\11\1\0\1\12\1\0"+
    "\1\1\1\0\1\13\5\0\1\14\1\15\10\1\1\16"+
    "\4\1\1\16\2\1\1\16\20\1\1\16\12\1\1\5"+
    "\3\1\4\7\4\0\1\11\1\0\2\12\1\1\5\0"+
    "\41\1\1\5\2\1\4\7\5\0\1\17\3\0\31\1"+
    "\1\20\2\1\3\7\1\21\3\0\26\1\1\7\3\0"+
    "\6\1\1\17\11\1\1\0\4\1\1\0\3\1\1\20"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\142\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\142\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\142\0\u0436\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\142\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u0746\0\142\0\142\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\142\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\u0188\0\142\0\142\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\223\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u119c\0\223\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\142"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1"+
    "\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u0c0f\0\u16f8"+
    "\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08"+
    "\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90"+
    "\0\u0c0f\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7"+
    "\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u089d\0\u1ddc\0\u1e0d\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6"+
    "\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e"+
    "\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6"+
    "\0\u2307\0\223\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5"+
    "\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d"+
    "\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5"+
    "\0\u28f6\0\u2927\0\u242d\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c"+
    "\0\u2a4d\0\u2a7e\0\u2aaf\0\223\0\u2ae0\0\u2b11\0\u2b42\0\u2b73"+
    "\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2cfb"+
    "\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83"+
    "\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b"+
    "\0\u303c\0\u306d\0\u309e\0\142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\5\1\10\1\11"+
    "\1\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\2\31\1\32\1\3\1\33\1\4\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\2\4\1\44\1\13"+
    "\2\21\1\33\1\26\1\4\1\36\12\45\1\46\13\45"+
    "\1\47\7\45\1\50\2\45\1\51\14\45\1\52\1\53"+
    "\1\54\62\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\14\4\4\0\3\4\3\0\2\5\1\0\1\5\7\0"+
    "\1\55\1\56\1\57\1\0\1\60\3\0\1\56\27\0"+
    "\1\56\5\0\1\61\1\62\1\0\1\62\6\0\1\63"+
    "\1\55\1\56\1\57\1\0\1\60\3\0\1\56\27\0"+
    "\1\56\3\0\6\4\6\0\3\4\1\64\2\0\6\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\65\1\66\5\0"+
    "\1\65\1\67\1\65\1\70\2\0\1\65\1\71\2\65"+
    "\1\72\1\65\5\0\14\65\4\0\3\65\1\0\6\73"+
    "\1\0\1\74\4\0\4\73\2\0\6\73\5\0\14\73"+
    "\4\0\3\73\13\0\1\13\36\0\1\13\22\0\1\75"+
    "\45\0\6\4\6\0\4\4\2\0\6\4\5\0\7\4"+
    "\1\76\4\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\6\4\5\0\2\4\1\77\4\4\1\100\4\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\6\4"+
    "\5\0\7\4\1\101\4\4\4\0\3\4\1\0\6\4"+
    "\6\0\1\4\1\102\2\4\2\0\1\4\1\103\4\4"+
    "\5\0\6\4\1\104\5\4\4\0\3\4\3\0\2\60"+
    "\1\0\1\60\53\0\6\4\6\0\4\4\2\0\6\4"+
    "\5\0\1\105\6\4\1\106\1\4\1\107\2\4\4\0"+
    "\1\4\1\105\1\4\1\0\6\4\6\0\3\4\1\110"+
    "\2\0\4\4\1\111\1\4\5\0\7\4\1\112\4\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\5\4"+
    "\1\113\5\0\6\4\1\114\5\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\2\4\1\115\2\4\1\116"+
    "\5\0\2\4\1\117\4\4\1\120\4\4\4\0\3\4"+
    "\1\0\4\4\1\121\1\4\6\0\4\4\2\0\1\4"+
    "\1\122\1\4\1\123\1\4\1\124\5\0\4\4\1\125"+
    "\1\4\1\126\5\4\4\0\1\123\2\4\1\0\6\4"+
    "\6\0\1\4\1\127\1\4\1\130\2\0\1\131\1\127"+
    "\4\4\5\0\1\132\1\4\1\133\11\4\4\0\1\4"+
    "\1\132\1\4\54\0\1\21\5\0\6\4\6\0\4\4"+
    "\2\0\1\4\1\134\2\4\1\135\1\116\5\0\7\4"+
    "\1\136\4\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\3\4\1\116\1\4\1\116\5\0\6\4\1\137"+
    "\5\4\4\0\1\116\2\4\1\0\6\4\6\0\4\4"+
    "\2\0\4\4\1\140\1\4\5\0\1\141\1\4\1\142"+
    "\11\4\4\0\1\4\1\141\1\4\1\0\6\4\6\0"+
    "\4\4\2\0\4\4\1\143\1\4\5\0\7\4\1\144"+
    "\4\4\4\0\3\4\1\0\6\4\6\0\3\4\1\145"+
    "\2\0\6\4\5\0\14\4\4\0\3\4\1\0\6\4"+
    "\6\0\4\4\2\0\2\4\1\146\1\4\1\147\1\116"+
    "\5\0\7\4\1\150\4\4\4\0\3\4\1\0\6\4"+
    "\6\0\4\4\2\0\1\151\1\152\1\153\1\116\2\4"+
    "\5\0\14\4\4\0\1\116\2\4\1\0\6\4\6\0"+
    "\4\4\2\0\4\4\1\154\1\116\5\0\7\4\1\126"+
    "\4\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\4\4\1\155\1\4\5\0\14\4\4\0\3\4\12\45"+
    "\1\0\43\45\3\0\12\45\1\0\10\45\1\156\14\45"+
    "\1\157\15\45\3\0\12\45\1\0\10\45\1\160\32\45"+
    "\3\0\12\45\1\0\26\45\1\161\14\45\2\0\1\162"+
    "\23\0\1\163\14\0\1\164\43\0\1\165\76\0\1\162"+
    "\16\0\1\162\3\0\2\166\1\0\1\166\5\0\1\167"+
    "\4\0\1\167\42\0\2\60\1\0\1\60\10\0\1\56"+
    "\1\57\5\0\1\56\27\0\1\56\5\0\2\61\1\0"+
    "\1\61\10\0\1\56\1\57\1\0\1\60\3\0\1\56"+
    "\27\0\1\56\5\0\1\61\1\62\1\0\1\62\7\0"+
    "\1\170\1\56\1\57\1\0\1\60\3\0\1\56\27\0"+
    "\1\56\5\0\4\171\10\0\2\171\5\0\2\171\12\0"+
    "\1\171\13\0\1\171\3\0\6\4\6\0\4\4\2\0"+
    "\6\4\5\0\5\4\1\172\6\4\4\0\3\4\1\0"+
    "\6\65\1\66\5\0\4\65\2\0\6\65\5\0\14\65"+
    "\4\0\3\65\1\0\6\65\1\66\5\0\3\65\1\173"+
    "\2\0\6\65\5\0\7\65\1\174\4\65\4\0\3\65"+
    "\1\0\6\65\1\66\5\0\4\65\2\0\6\65\5\0"+
    "\13\65\1\175\4\0\3\65\1\0\6\65\1\66\5\0"+
    "\4\65\2\0\6\65\5\0\2\65\1\176\11\65\4\0"+
    "\3\65\1\0\6\65\1\66\5\0\4\65\2\0\6\65"+
    "\5\0\4\65\1\177\7\65\4\0\3\65\1\0\6\4"+
    "\6\0\4\4\2\0\1\4\1\152\4\4\5\0\14\4"+
    "\4\0\3\4\1\0\4\4\1\200\1\4\6\0\4\4"+
    "\2\0\6\4\5\0\14\4\4\0\3\4\1\0\6\4"+
    "\6\0\4\4\2\0\6\4\5\0\7\4\1\154\4\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\6\4"+
    "\5\0\3\4\1\201\10\4\4\0\2\4\1\201\1\0"+
    "\6\4\6\0\4\4\2\0\5\4\1\202\5\0\14\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\1\4"+
    "\1\203\4\4\5\0\14\4\4\0\3\4\1\0\6\4"+
    "\6\0\2\4\1\116\1\4\2\0\1\204\5\4\5\0"+
    "\14\4\4\0\3\4\1\0\6\4\6\0\3\4\1\205"+
    "\2\0\6\4\5\0\14\4\4\0\3\4\1\0\1\4"+
    "\1\206\4\4\6\0\4\4\2\0\6\4\5\0\14\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\6\4"+
    "\5\0\1\4\1\207\12\4\4\0\3\4\1\0\6\4"+
    "\6\0\4\4\2\0\1\210\5\4\5\0\1\4\1\211"+
    "\2\4\1\212\3\4\1\152\3\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\6\4\1\213"+
    "\5\4\4\0\3\4\1\0\6\4\6\0\1\4\1\152"+
    "\2\4\2\0\1\4\1\152\4\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\3\4\1\116\2\0\6\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\5\4\1\214\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\6\4\1\215"+
    "\5\4\4\0\3\4\1\0\6\4\6\0\1\4\1\207"+
    "\2\4\2\0\6\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\1\4\1\116\4\4\5\0"+
    "\14\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\5\4\1\152\5\0\14\4\4\0\3\4\1\0\6\4"+
    "\6\0\4\4\2\0\1\4\1\216\4\4\5\0\4\4"+
    "\1\217\7\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\1\220\5\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\5\4\1\221\5\0\14\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\6\4"+
    "\5\0\4\4\1\222\7\4\4\0\3\4\1\0\6\4"+
    "\6\0\2\4\1\152\1\4\2\0\6\4\5\0\14\4"+
    "\4\0\3\4\1\0\6\4\6\0\1\4\1\152\2\4"+
    "\2\0\4\4\1\152\1\4\5\0\14\4\4\0\3\4"+
    "\1\0\6\4\6\0\1\4\1\223\2\4\2\0\6\4"+
    "\5\0\13\4\1\224\4\0\3\4\1\0\6\4\6\0"+
    "\2\4\1\225\1\4\2\0\6\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\4\4\1\226"+
    "\1\4\5\0\14\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\6\4\5\0\5\4\1\227\6\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\7\4\1\230\4\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\6\4\5\0\4\4\1\231\7\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\1\4\1\153"+
    "\4\4\5\0\14\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\1\232\5\4\5\0\14\4\4\0\3\4"+
    "\1\0\6\4\6\0\4\4\2\0\1\4\1\233\4\4"+
    "\5\0\2\4\1\153\11\4\4\0\3\4\1\0\6\4"+
    "\6\0\3\4\1\205\2\0\6\4\5\0\2\4\1\117"+
    "\11\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\1\234\5\4\5\0\14\4\4\0\3\4\1\0\6\4"+
    "\6\0\4\4\2\0\5\4\1\207\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\6\4\1\235\1\4\1\236\3\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\6\4\1\237"+
    "\5\4\4\0\3\4\1\0\6\4\6\0\1\4\1\240"+
    "\2\4\2\0\6\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\6\4\1\126"+
    "\5\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\1\241\1\152\4\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\1\242\13\4"+
    "\4\0\1\4\1\242\1\4\1\0\6\4\6\0\4\4"+
    "\2\0\1\116\5\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\1\4\1\116"+
    "\12\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\1\4\1\243\4\4\5\0\14\4\4\0\3\4\12\45"+
    "\1\0\24\45\1\244\16\45\3\0\12\45\1\0\3\45"+
    "\1\245\37\45\3\0\12\45\1\0\10\45\1\246\32\45"+
    "\3\0\12\45\1\0\26\45\1\247\14\45\2\0\1\250"+
    "\41\0\1\250\16\0\1\250\37\0\1\251\37\0\1\252"+
    "\65\0\1\253\40\0\2\166\1\0\1\166\10\0\1\56"+
    "\6\0\1\56\27\0\1\56\5\0\2\166\1\0\1\166"+
    "\55\0\4\171\7\0\1\170\2\171\5\0\2\171\12\0"+
    "\1\171\13\0\1\171\3\0\6\4\6\0\4\4\2\0"+
    "\6\4\5\0\2\4\1\205\11\4\4\0\3\4\1\0"+
    "\6\65\1\66\5\0\4\65\2\0\3\65\1\254\2\65"+
    "\5\0\14\65\4\0\1\254\2\65\1\0\6\65\1\66"+
    "\5\0\4\65\2\0\6\65\5\0\3\65\1\255\10\65"+
    "\4\0\2\65\1\255\1\0\6\65\1\66\5\0\3\65"+
    "\1\256\2\0\6\65\5\0\14\65\4\0\3\65\1\0"+
    "\6\65\1\66\5\0\4\65\2\0\6\65\5\0\5\65"+
    "\1\257\6\65\4\0\3\65\1\0\6\65\1\66\5\0"+
    "\4\65\2\0\1\260\5\65\5\0\14\65\4\0\3\65"+
    "\1\0\6\4\6\0\4\4\2\0\1\4\1\261\4\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\6\4\5\0\6\4\1\262\5\4\4\0\3\4"+
    "\1\0\6\4\6\0\3\4\1\116\2\0\6\4\5\0"+
    "\2\4\1\263\11\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\6\4\5\0\7\4\1\120\4\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\2\4\1\264\11\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\6\4\5\0\6\4\1\116\5\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\2\4\1\265\11\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\2\4\1\266\3\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\7\4\1\136\4\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\6\4\5\0\7\4\1\267\4\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\5\4\1\207\6\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\6\4\5\0\2\4\1\270\11\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\4\4\1\271\7\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\4\4\1\272\1\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\1\273\13\4\4\0\1\4\1\273\1\4\1\0\6\4"+
    "\6\0\3\4\1\120\2\0\6\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\3\4\1\136\2\0\6\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\4\6\0\3\4"+
    "\1\274\2\0\6\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\3\4\1\275\2\0\6\4\5\0\14\4"+
    "\4\0\3\4\1\0\6\4\6\0\3\4\1\276\2\0"+
    "\6\4\5\0\14\4\4\0\3\4\1\0\1\4\1\277"+
    "\4\4\6\0\4\4\2\0\6\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\1\4\1\300"+
    "\4\4\5\0\14\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\6\4\5\0\6\4\1\301\5\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\4\4\1\302\7\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\6\4\5\0\12\4\1\303\1\4\4\0"+
    "\3\4\1\0\6\4\6\0\3\4\1\304\2\0\6\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\6\4\5\0\6\4\1\305\5\4\4\0\3\4"+
    "\1\0\6\4\6\0\4\4\2\0\6\4\5\0\1\116"+
    "\13\4\4\0\1\4\1\116\1\4\1\0\6\4\6\0"+
    "\4\4\2\0\3\4\1\306\1\4\1\307\5\0\14\4"+
    "\4\0\1\306\2\4\1\0\6\4\6\0\4\4\2\0"+
    "\6\4\5\0\1\4\1\310\12\4\4\0\3\4\1\0"+
    "\6\4\6\0\3\4\1\311\2\0\6\4\5\0\14\4"+
    "\4\0\3\4\1\0\6\4\6\0\1\4\1\312\2\4"+
    "\2\0\6\4\5\0\14\4\4\0\3\4\1\0\6\4"+
    "\6\0\3\4\1\313\2\0\6\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\2\4\1\314\11\4\4\0\3\4\12\45\1\0\20\45"+
    "\1\315\22\45\3\0\12\45\1\0\5\45\1\244\35\45"+
    "\3\0\12\45\1\0\24\45\1\316\16\45\3\0\12\45"+
    "\1\0\7\45\1\317\33\45\25\0\1\320\71\0\1\321"+
    "\45\0\1\251\77\0\1\322\22\0\6\65\1\66\5\0"+
    "\4\65\2\0\1\255\5\65\5\0\14\65\4\0\3\65"+
    "\1\0\6\65\1\66\5\0\4\65\2\0\6\65\5\0"+
    "\6\65\1\254\5\65\4\0\3\65\1\0\6\65\1\66"+
    "\5\0\4\65\2\0\6\65\5\0\1\254\13\65\4\0"+
    "\1\65\1\254\1\65\1\0\6\65\1\66\5\0\4\65"+
    "\2\0\6\65\5\0\2\65\1\323\11\65\4\0\3\65"+
    "\1\0\6\4\6\0\4\4\2\0\4\4\1\324\1\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\1\325\5\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\3\4\1\116\2\4\5\0"+
    "\14\4\4\0\1\116\2\4\1\0\6\4\6\0\4\4"+
    "\2\0\1\326\5\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\6\4\1\327"+
    "\5\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\1\4\1\205\4\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\1\4\1\330\4\4\5\0"+
    "\14\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\6\4\5\0\5\4\1\331\6\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\1\332\5\4\5\0\14\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\6\4"+
    "\5\0\11\4\1\312\2\4\4\0\3\4\1\0\6\4"+
    "\6\0\4\4\2\0\6\4\5\0\2\4\1\333\11\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\5\4"+
    "\1\334\5\0\14\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\6\4\5\0\4\4\1\153\7\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\1\4\1\204"+
    "\4\4\5\0\14\4\4\0\3\4\1\0\6\4\6\0"+
    "\1\4\1\335\2\4\2\0\6\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\3\4\1\336\2\0\6\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\4\6\0\3\4"+
    "\1\337\2\0\4\4\1\340\1\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\3\4\1\341\2\0\6\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\4\4\1\213\1\4\5\0\14\4\4\0\3\4"+
    "\1\0\6\4\6\0\4\4\2\0\6\4\5\0\5\4"+
    "\1\342\6\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\6\4\5\0\2\4\1\343\11\4\4\0\3\4"+
    "\1\0\6\4\6\0\4\4\2\0\6\4\5\0\2\4"+
    "\1\344\11\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\1\345\5\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\7\4\1\346"+
    "\4\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\1\4\1\347\4\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\1\4\1\350\4\4\5\0"+
    "\14\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\4\4\1\351\1\4\5\0\14\4\4\0\3\4\12\45"+
    "\1\0\22\45\1\352\20\45\3\0\12\45\1\0\15\45"+
    "\1\244\2\45\1\315\22\45\3\0\1\45\7\317\1\45"+
    "\1\317\1\0\1\45\15\317\1\45\20\317\1\45\2\317"+
    "\1\45\3\320\1\0\1\320\1\353\4\320\1\353\1\0"+
    "\1\353\2\0\1\353\4\320\2\353\6\320\1\0\2\353"+
    "\16\320\1\0\2\353\1\0\3\320\35\0\1\354\53\0"+
    "\1\251\2\0\1\321\26\0\6\65\1\66\5\0\4\65"+
    "\2\0\6\65\5\0\13\65\1\355\4\0\3\65\1\0"+
    "\6\4\6\0\4\4\2\0\1\4\1\326\4\4\5\0"+
    "\14\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\6\4\5\0\7\4\1\116\4\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\11\4\1\116"+
    "\2\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\1\356\5\4\5\0\14\4\4\0\3\4\1\0\6\4"+
    "\6\0\2\4\1\312\1\4\2\0\6\4\5\0\14\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\6\4"+
    "\5\0\6\4\1\357\5\4\4\0\3\4\1\0\6\4"+
    "\6\0\4\4\2\0\6\4\5\0\2\4\1\360\11\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\1\361"+
    "\5\4\5\0\14\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\5\4\1\312\5\0\14\4\4\0\3\4"+
    "\1\0\6\4\6\0\4\4\2\0\6\4\5\0\7\4"+
    "\1\362\4\4\4\0\3\4\1\0\6\4\6\0\2\4"+
    "\1\363\1\4\2\0\6\4\5\0\14\4\4\0\3\4"+
    "\1\0\6\4\6\0\2\4\1\364\1\4\2\0\6\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\4\6\0\1\4"+
    "\1\116\2\4\2\0\6\4\5\0\14\4\4\0\3\4"+
    "\1\0\6\4\6\0\4\4\2\0\5\4\1\350\5\0"+
    "\14\4\4\0\3\4\1\0\6\4\6\0\3\4\1\365"+
    "\2\0\6\4\5\0\14\4\4\0\3\4\1\0\6\4"+
    "\6\0\4\4\2\0\6\4\5\0\6\4\1\366\5\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\6\4"+
    "\5\0\5\4\1\367\6\4\4\0\3\4\1\0\6\4"+
    "\6\0\4\4\2\0\4\4\1\370\1\4\5\0\14\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\6\4"+
    "\5\0\6\4\1\371\5\4\4\0\3\4\1\0\6\4"+
    "\6\0\4\4\2\0\6\4\5\0\2\4\1\372\11\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\5\4"+
    "\1\116\5\0\14\4\4\0\3\4\1\0\4\4\1\117"+
    "\1\4\6\0\4\4\2\0\6\4\5\0\14\4\4\0"+
    "\3\4\12\45\1\0\22\45\1\317\20\45\40\0\1\320"+
    "\24\0\6\65\1\66\5\0\3\65\1\255\2\0\6\65"+
    "\5\0\14\65\4\0\3\65\1\0\6\4\6\0\3\4"+
    "\1\373\2\0\6\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\3\4\1\337\2\0\6\4\5\0\14\4"+
    "\4\0\3\4\1\0\6\4\6\0\4\4\2\0\6\4"+
    "\5\0\7\4\1\205\4\4\4\0\3\4\1\0\6\4"+
    "\6\0\3\4\1\374\2\0\6\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\6\4\5\0"+
    "\5\4\1\375\6\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\6\4\5\0\14\4\1\376\3\0\3\4"+
    "\1\0\6\4\6\0\4\4\2\0\1\4\1\312\4\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\6\4\5\0\5\4\1\116\6\4\4\0\3\4"+
    "\1\0\6\4\6\0\4\4\2\0\2\4\1\377\3\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\6\4\5\0\6\4\1\153\5\4\4\0\3\4"+
    "\1\0\6\4\6\0\3\4\1\370\2\0\6\4\5\0"+
    "\14\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\6\4\5\0\4\4\1\116\7\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\5\4\1\u0100"+
    "\6\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\6\4\5\0\4\4\1\u0101\7\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\2\4\1\u0102"+
    "\11\4\4\0\3\4\51\0\1\u0103\10\0\6\4\6\0"+
    "\4\4\2\0\1\4\1\u0104\4\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\3\4\1\u0105\2\0\6\4"+
    "\5\0\14\4\4\0\3\4\1\0\6\4\6\0\4\4"+
    "\2\0\1\u0106\5\4\5\0\14\4\4\0\3\4\1\0"+
    "\6\4\6\0\4\4\2\0\6\4\5\0\4\4\1\u0107"+
    "\7\4\4\0\3\4\27\0\1\u0108\32\0\6\4\6\0"+
    "\4\4\2\0\4\4\1\271\1\4\5\0\14\4\4\0"+
    "\3\4\1\0\6\4\6\0\4\4\2\0\1\4\1\364"+
    "\4\4\5\0\14\4\4\0\3\4\1\0\6\4\6\0"+
    "\4\4\2\0\2\4\1\u0109\3\4\5\0\14\4\4\0"+
    "\3\4\1\0\1\4\1\u010a\4\4\6\0\4\4\2\0"+
    "\6\4\5\0\14\4\4\0\3\4\24\0\1\u010b\35\0"+
    "\6\4\6\0\4\4\2\0\1\4\1\207\4\4\5\0"+
    "\14\4\4\0\3\4\1\0\6\4\6\0\4\4\2\0"+
    "\6\4\5\0\13\4\1\u010c\4\0\3\4\40\0\1\u010d"+
    "\21\0\6\4\6\0\3\4\1\u010e\2\0\6\4\5\0"+
    "\14\4\4\0\3\4\27\0\1\u010f\32\0\6\4\6\0"+
    "\4\4\2\0\6\4\5\0\4\4\1\u0110\7\4\4\0"+
    "\3\4\5\0\1\u0111\54\0\6\4\6\0\4\4\2\0"+
    "\1\u0112\5\4\5\0\14\4\4\0\3\4\16\0\1\u0113"+
    "\43\0\6\4\6\0\4\4\2\0\6\4\5\0\7\4"+
    "\1\365\4\4\4\0\3\4\20\0\1\u0114\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12495];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\1\11\6\1\1\11\7\1\1\11"+
    "\14\1\1\11\6\1\2\11\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\11\5\0\2\11\64\1\4\0"+
    "\1\1\1\0\1\11\2\1\5\0\50\1\5\0\1\1"+
    "\3\0\40\1\3\0\27\1\3\0\20\1\1\0\4\1"+
    "\1\0\4\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public VHDLLexer() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[]{"--", null};
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			/* No multi-line comments */
			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public VHDLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public VHDLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { addToken(Token.RESERVED_WORD);
          }
        case 18: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 19: break;
        case 15: 
          { addToken(Token.FUNCTION);
          }
        case 20: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 21: break;
        case 9: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 22: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 23: break;
        case 17: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 24: break;
        case 16: 
          { addToken(Token.DATA_TYPE);
          }
        case 25: break;
        case 10: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 26: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 27: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 28: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 29: break;
        case 11: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 30: break;
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 31: break;
        case 8: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 32: break;
        case 7: 
          { 
          }
        case 33: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 277: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 278: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}